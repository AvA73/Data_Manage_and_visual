mod.ANCOHET.X.fe = lm(y ~ tau.1 + tau.2 + tau.3 + tau.4 + centered.X +
tau.1*centered.X + tau.2*centered.X + tau.3*centered.X + tau.4*centered.X, data=dat)
# center X
# ===============================================================
dat$centered.X = dat$X - mean(dat$X)
# ANCOHET model--group-specific slopes for the covariate
mod.ANCOHET.X.fe = lm(y ~ tau.1 + tau.2 + tau.3 + tau.4 + centered.X +
tau.1*centered.X + tau.2*centered.X + tau.3*centered.X + tau.4*centered.X, data=dat)
summary(mod.ANCOHET.X.fe)
anova(mod.ANCOHET.X.fe)
# ANCOVA model--identical slopes for the covariate
mod.ANCOVA.X.fe = lm(y ~ tau.1 + tau.2 + tau.3 + tau.4 + centered.X, data=dat)
V
anova(mod.ANCOVA.X.fe)
pf(0.282625, 4, 10)
# simple regression model--no groups
mod.REG.X.fe = lm(y ~ centered.X, data=dat)
anova(mod.REG.X.fe)
pf(4.5694, 4, 14)
anova(mod.ANCOVA.X.fe)
anova(mod.REG.X.fe)
# Group 1
mod.ANCOVA.X.fe$coefficients[1] + mod.ANCOVA.X.fe$coefficients[2]
# ANOVA model--no covariate
mod.ANOVA.X.fe = lm(y ~ tau.1 + tau.2 + tau.3 + tau.4, data=dat)
summary(mod.ANOVA.X.fe)
summary(mod.ANCOVA.X.fe)
anova(mod.REG.X.fe,mod.ANCOVA.X.fe)
pf(4.5694, 4, 14)
qf(0.05, 4, 14)
qf(0.025, 4, 14)
pf(4.5694, 4, 14)
anova(mod.ANCOVA.X.fe)
summary(mod.ANCOVA.X.fe)
# for mu.5
dat$mu.5 = rep(c(0,0,0,0,1),times=numPerCell)
# Group 5
mod.ANCOVA.X.fe$coefficients[1] + (-1)*( mod.ANCOVA.X.fe$coefficients[2] +
mod.ANCOVA.X.fe$coefficients[3] +
mod.ANCOVA.X.fe$coefficients[4] +
mod.ANCOVA.X.fe$coefficients[5] )
# Group 4
mod.ANCOVA.X.fe$coefficients[1] + mod.ANCOVA.X.fe$coefficients[5]
dat$cX.mu.1 = dat$centered.X*dat$mu.1
## # ANCOHET model--group-specific slopes for the covariate
## mod.ANCOHET.X.cm = lm(y ~ mu.1 + mu.2 + mu.3 + mu.4 + mu.5 +
##                           mu.1*centered.X + mu.2*centered.X + mu.3*centered.X +
##                           mu.4*centered.X + mu.5*centered.X - 1, data=dat)
# ===============================================================
# the resulting estimates are not in the desired parameterization
#
# HENCE,
# generate new variables "dat$cX.mu1", etc
# ===============================================================
dat$cX.mu.1 = dat$centered.X*dat$mu.1
dat$cX.mu.4 = dat$centered.X*dat$mu.4
numPerCell=as.vector(table(dat$Method))
# for mu.1
dat$mu.1 = rep(c(1,0,0,0,0),times=numPerCell)
# for mu.2
dat$mu.2 = rep(c(0,1,0,0,0),times=numPerCell)
# for mu.3
dat$mu.3 = rep(c(0,0,1,0,0),times=numPerCell)
# for mu.4
dat$mu.4 = rep(c(0,0,0,1,0),times=numPerCell)
# for mu.5
dat$mu.5 = rep(c(0,0,0,0,1),times=numPerCell)
## # ANCOHET model--group-specific slopes for the covariate
## mod.ANCOHET.X.cm = lm(y ~ mu.1 + mu.2 + mu.3 + mu.4 + mu.5 +
##                           mu.1*centered.X + mu.2*centered.X + mu.3*centered.X +
##                           mu.4*centered.X + mu.5*centered.X - 1, data=dat)
# ===============================================================
# the resulting estimates are not in the desired parameterization
#
# HENCE,
# generate new variables "dat$cX.mu1", etc
# ===============================================================
dat$cX.mu.1 = dat$centered.X*dat$mu.1
dat$cX.mu.1 = dat$centered.X*dat$mu.1
dat$cX.mu.2 = dat$centered.X*dat$mu.2
dat$cX.mu.3 = dat$centered.X*dat$mu.3
dat$cX.mu.4 = dat$centered.X*dat$mu.4
dat$cX.mu.5 = dat$centered.X*dat$mu.5
# ===============================================================
# THEN, fit the ANCOHET model
# ===============================================================
# ANCOHET model--group-specific slopes for the covariate
mod.ANCOHET.X.cm = lm(y ~ mu.1 + mu.2 + mu.3 + mu.4 + mu.5 +
cX.mu.1 + cX.mu.2 + cX.mu.3 + cX.mu.4 + cX.mu.5 - 1, data=dat)
# ANCOVA model--identical slopes for the covariate
mod.ANCOVA.X.cm = lm(y ~ mu.1 + mu.2 + mu.3 + mu.4 + mu.5 + centered.X - 1, data=dat)
# model comparisons
anova(mod.ANCOVA.X.cm,mod.ANCOHET.X.cm)
# simple regression model--no groups
mod.REG.X = lm(y ~ centered.X, data=dat)
anova(mod.REG.X,mod.ANCOVA.X.cm)
# Group 1
mod.ANCOVA.X.cm$coefficients[1]
# Group 2
mod.ANCOVA.X.cm$coefficients[2]
# Group 3
mod.ANCOVA.X.cm$coefficients[3]
# Group 4
mod.ANCOVA.X.cm$coefficients[4]
# Group 5
mod.ANCOVA.X.cm$coefficients[5]
x = [252, 265, 183, 211, 207]
x = c(252, 265, 183, 211, 207)
x.mean
x.mean()
mean(x)
x/7
x = x/7
mean(x)
var(x)
qf(0.05, 4, 31)
qf(0.025, 4, 31)
qf(0.975, 4, 31)
install.packages(ggplot2)
install.packages('ggplot2')
install.packages(('ggfortify'))
install.packages('mlbench')
install.packages('glmnet')
Hitters_sub = Hitters %>%
select(Salary,AtBat,Hits,HmRun,Runs,RBI,Walks,Years)
library('leaps')
library('lattice')
library('data.table')
library('ISLR')
library('tidyverse')
library('ggplot2')
library('ggfortify')
library('mlbench')
library('glmnet')
Hitters_sub = Hitters %>%
select(Salary,AtBat,Hits,HmRun,Runs,RBI,Walks,Years)
View(Hitters_sub)
View(Hitters_sub)
Hitters_sub[:1]
library(dplyr)
num_rows <- nrow(Hitters_sub)
split_index <- num_rows %/% 2 # you can choose your desired index for splitting
# Create two dataframes by selecting rows before and after the split_index
Hitters_sub_part1 <- Hitters_sub %>% slice(1:split_index)
Hitters_sub_part2 <- Hitters_sub %>% slice((split_index + 1):num_rows)
View(Hitters_sub)
View(Hitters_sub)
r.model = lm(Salary ~ 1, data=Hitters_sub_part1)
f.model = lm(Salary ~ ., data=Hitters_sub_part1)
install.packages('ggplot2')
install.packages(('ggfortify'))
install.packages('mlbench')
install.packages('glmnet')
library('leaps')
library('lattice')
library('data.table')
library('ISLR')
library('tidyverse')
library('ggplot2')
library('ggfortify')
library('mlbench')
library('glmnet')
Hitters_sub = Hitters %>%
select(Salary,AtBat,Hits,HmRun,Runs,RBI,Walks,Years)
library(dplyr)
num_rows <- nrow(Hitters_sub)
split_index <- num_rows %/% 2 # you can choose your desired index for splitting
# Create two dataframes by selecting rows before and after the split_index
Hitters_sub_part1 <- Hitters_sub %>% slice(1:split_index)
Hitters_sub_part2 <- Hitters_sub %>% slice((split_index + 1):num_rows)
#Ridge Model
r.model = lm(Salary ~ 1, data=Hitters_sub_part1)
f.model = lm(Salary ~ ., data=Hitters_sub_part1)
View(Hitters_sub_part1)
View(Hitters_sub_part1)
y = Hitters_sub_part1$Salary
x = model.matrix(f.model)[,-1]
head(x)
ridge.fit1 = glmnet(x,y,alpha = 0,lambda=0)
ridge.fit1 = glmnet(x,y,alpha = 0,lambda=0)
y
x = model.matrix(f.model)[,-1]
head(x)
x
ridge.fit1 = glmnet(x,y,alpha = 0,lambda=0)
View(Hitters_sub)
Hitters = Hitters_sub %>%
na.omit()
predictors = Hitters[,!names(Hitters) %in% "Salary"]
n = nrow(Hitters)
p = ncol(predictors)
split_index <- num_rows %/% 2 # you can choose your desired index for splitting
# Create two dataframes by selecting rows before and after the split_index
Hitters_sub_part1 <- Hitters %>% slice(1:split_index)
Hitters_sub_part2 <- Hitters %>% slice((split_index + 1):num_rows)
r.model = lm(Salary ~ 1, data=Hitters_sub_part1)
f.model = lm(Salary ~ ., data=Hitters_sub_part1)
y = Hitters_sub_part1$Salary
x = model.matrix(f.model)[,-1]
ridge.fit1 = glmnet(x,y,alpha = 0,lambda=0)
ridge.fit2 = glmnet(x,y,alpha = 0,lambda=2)
ridge.fit2 = glmnet(x,y,alpha = 0,lambda=2)
ridge.fit3 = glmnet(x,y,alpha = 0,lambda=4)
df = cbind(coef(ridge.fit1),coef(ridge.fit2),coef(ridge.fit3))
df
colnames(df) = c("lambda=0","lambda=2","lambda=4")
df
#cat()
x = cat('Hey this is', 0080382, 'your loyal housekeeper')
x
x
#cat()
x = cat('Hey this is', 0080382, 'your loyal housekeeper')
#cat()
xcat('Hey this is', 0080382, 'your loyal housekeeper')
#cat()
x <- cat('Hey this is', 0080382, 'your loyal housekeeper')
x
any(a <= 3)
a <-c(1,3,76)
any(a <= 3)
a[c(2,3)]
years <- c(1960, 1964, 1976, 1994)
names(years) <- c('K', 'L', 'J', 'G')
years
w*z
w <- c(1,2,3,4,5)
y <- c(2,2,5,4,3)
z <- c(2,5,3)
w*z
w+z
z+w
a <- [1,2,3,4]
a <- list[1,2,3,4]
a <- list[1,2,3,4]
a <- list(1,2,3,4)
a[[2]]
a[2]
a[4]
a <- list(1,2,3,4,3,4,2,5,6)
a[4]
x <- c(1,2,3,4,5)
mean(x)
var(x)
sd(x)
(18-20)/sqrt(4)
pt(-1)
6/(9*16)
var(x)
sd(x)
6/(3*4)
library(rprojroot)
install(rprojroot)
package.install(rprojroot)
rprojroot::find_root(has_dir("src"))
library(rprojroot)
rprojroot::find_root(has_dir("src"))
root_directory <- rprojroot::find_rstudio_root_file()
code_path <- file.path(root_path, "src")
code_path <- file.path(root_directory, "src")
code_path
root_directory
docs_path <- here::here("doc")
install.packages("here")
library(here)
docs_path <- here::here("doc")
docs_path
docs_path <- file.path(root_directory, "doc")
docs_path
data_path <- file.path(root_directory, "data",'raw data')
data_path
iris_data <- read.csv(file = file.path(data_path, "iris.csv"))
# From the data already available in R
data(iris)
summary(iris_data)
summary(iris)
str(iris)
## Generate html file ----
quarto::quarto_render(input = "./src/qmd/iris.qmd",
output_file = "./doc/iris.html")
x <- 3+4
y <- 2/1
# Load packages ----
library(tidyverse)
detach("package:dplyr", unload = TRUE)
# Load packages ----
library(tidyverse)
# Read data ----
world_data  <- readr::read_csv("/data/World.csv")
setwd("/Users/yaoyuji/Courses/Data_Manage_and_Visual/01_-_Assignment_1_-_Yao")
# Read data ----
world_data  <- readr::read_csv("data/World.csv")
# Read data ----
world_data  <- readr::read_csv("../../data/World.csv")
# Read data ----
world_data  <- readr::read_csv("/Users/yaoyuji/Courses/Data_Manage_and_Visual/01_-_Assignment_1_-_Yao/data/World.csv")
# Read data ----
world_data  <- readr::read_csv("/Users/yaoyuji/Courses/Data_Manage_and_Visual/01_-_Assignment_1_-_Yao/data/raw_data/World.csv")
# Read data ----
world_data  <- readr::read_csv("../../data/raw_data/World.csv")
kenya_data  <- readr::read_csv("../../data/raw_data/Kenya.csv")
sweden_data <- readr::read_csv("../../data/raw_data/Sweden.csv")
# Create new variable py = total person years for each data set
world_data$py <- world_data$py.men + world_data$py.women
kenya_data$py <- kenya_data$py.men + kenya_data$py.women
sweden_data$py <- sweden_data$py.men + sweden_data$py.women
compute_cbr <- function (population_data) {
population_data %>%
group_by(period) %>%
summarise(cbr = sum(births) / sum(py)) %>%
pull()
}
# Compute the CBR for each data set
world_cbr <- compute_cbr(world_data)
library(dplyr)
# Compute the CBR for each data set
world_cbr <- compute_cbr(world_data)
kenya_cbr <- compute_cbr(kenya_data)
sweden_cbr <- compute_cbr(sweden_data)
# Compute the CBR for each data set
world_cbr <- compute_cbr(world_data)
world_cbr
kenya_cbr
sweden_cbr
compute_asfr <- function (population_data) {
population_data %>%
mutate(asfr=births / py.women)
}
# Compute ASFR for each data set
world_asfr <- compute_asfr(world_data)
kenya_asfr <- compute_asfr(kenya_data)
sweden_asfr <- compute_asfr(sweden_data)
# Compare ASFRs for Kenya and Sweden
kenya_data$asfr
View(kenya_data)
world_data$cbr <- world_cbr
world_asfr
# Compute ASFR for each data set
world_asfr <- compute_asfr(world_data)
world_asfr
# Compare ASFRs for Kenya and Sweden
kenya_data$asfr <- kenya_asfr
sweden_data$asfr <- sweden_asfr
kenya_data$asfr
View(kenya_data)
View(kenya_data)
# Compute ASFR for each data set
world_asfr <- compute_asfr(world_data)
kenya_asfr <- compute_asfr(kenya_data)
kenya_asfr
# Read data ----
world_data  <- readr::read_csv("../../data/raw_data/World.csv")
kenya_data  <- readr::read_csv("../../data/raw_data/Kenya.csv")
sweden_data <- readr::read_csv("../../data/raw_data/Sweden.csv")
View(sweden_asfr)
View(sweden_asfr)
View(sweden_asfr)
View(sweden_asfr)
compute_asfr <- function (population_data) {
population_data %>%
filter(start_age >= 15, end_age < 50) %>%
mutate(asfr=births / py.women)
}
# Compute ASFR for each data set
world_asfr <- compute_asfr(world_data)
compute_asfr <- function (population_data) {
population_data %>%
filter(age >= 15, age < 50) %>%
mutate(asfr=births / py.women)
}
# Compute ASFR for each data set
world_asfr <- compute_asfr(world_data)
kenya_asfr <- compute_asfr(kenya_data)
sweden_asfr <- compute_asfr(sweden_data)
kenya_asfr
View(kenya_asfr)
View(kenya_asfr)
compute_asfr <- function (population_data) {
population_data %>%
mutate(start_age = as.numeric(str_extract(age, "^\\d+"))) %>%
filter(age >= 15, age < 50) %>%
mutate(asfr=births / py.women)
}
# Compute ASFR for each data set
world_asfr <- compute_asfr(world_data)
kenya_asfr <- compute_asfr(kenya_data)
sweden_asfr <- compute_asfr(sweden_data)
View(kenya_asfr)
View(kenya_asfr)
compute_asfr <- function (population_data) {
population_data %>%
mutate(start_age = as.numeric(str_extract(age, "^\\d+"))) %>%
filter(start_age >= 15, start_age < 50) %>%
mutate(asfr=births / py.women)
}
kenya_asfr <- compute_asfr(kenya_data)
View(kenya_asfr)
View(kenya_asfr)
# Compute ASFR for each data set
world_asfr <- compute_asfr(world_data)
sweden_asfr <- compute_asfr(sweden_data)
# Compare ASFRs for Kenya and Sweden
kenya_data$asfr <- kenya_asfr
View(kenya_asfr)
View(kenya_asfr)
# Compare ASFRs for Kenya and Sweden
kenya_asfr$asfr
sweden_asfr$asfr
View(sweden_asfr)
View(sweden_asfr)
compute_tfr <- function (population_data) {
population_data %>%
group_by(period) %>%
summarise(tfr=5 *sum(asfr)) %>%
pull()
}
# Compute the TFR for each data set
world_tfr  <- compute_tfr(world_asfr)
kenya_tfr  <- compute_tfr(kenya_asfr)
sweden_tfr <- compute_tfr(sweden_asfr)
totals_world <- world_data %>%
group_by(period) %>%
summarise(total_women=sum(py.women),
total_births=sum(births))
# Compare how much these totals have changed
changes_totals <- totals_world[2,-1]/totals_world[1,-1]
changes_totals
totals_world
changes_totals
totals_world
changes_totals_percent <- ((totals_world[2,-1] - totals_world[1,-1])/totals_world[1,-1])*100
changes_totals_percent
changes_totals
changes_totals_percent
totals_world
changes_totals_percent
compute_cdr <- function (population_data) {
population_data %>%
group_by(period) %>%
summarise(cbr = sum(deaths) / sum(py)) %>%
pull()
}
# Compute the CDR
world_cdr  <- compute_cdr(world_data)
View(world_data)
View(world_data)
compute_asfr <- function (population_data) {
population_data %>%
mutate(start_age = as.numeric(str_extract(age, "^\\d+"))) %>%
filter(start_age >= 15, start_age < 50) %>%
mutate(asfr=births / py.women)
}
world_asfr <- compute_asfr(world_data)
kenya_asfr <- compute_asfr(kenya_data)
sweden_asfr <- compute_asfr(sweden_data)
world_data$py <- world_data$py.men + world_data$py.women
kenya_data$py <- kenya_data$py.men + kenya_data$py.women
sweden_data$py <- sweden_data$py.men + sweden_data$py.women
# Compute the CDR
world_cdr  <- compute_cdr(world_data)
kenya_cdr  <- compute_cdr(kenya_data)
sweden_cdr <- compute_cdr(sweden_data)
world_cdr
kenya_cdr
sweden_cdr
compute_asdr <- function (pop_data) {
pop_data %>%
mutate(asdr=deaths/py)
}
# Compute ASDR for each data set
world_data  <- compute_asdr(world_data)
world_data$py <- world_data$py.men + world_data$py.women
# Read data ----
world_data  <- readr::read_csv("../../data/raw_data/World.csv")
world_data$py <- world_data$py.men + world_data$py.women
compute_asdr <- function (population_data) {
population_data %>%
mutate(asdr=deaths/py)
}
# Compute ASDR for each data set
world_asdr  <- compute_asdr(world_data)
kenya_asdr  <- compute_asdr(kenya_data)
sweden_asdr <- compute_asdr(sweden_data)
View(sweden_asdr)
View(sweden_asdr)
View(kenya_asdr)
View(kenya_asdr)
compute_asdr <- function (population_data) {
population_data %>%
mutate(period_time = as.numeric(str_extract(period, "^\\d+"))) %>%
filter(period_time >= 2005)
mutate(asdr=deaths/py)
}
# Compute ASDR for each data set
world_asdr  <- compute_asdr(world_data)
View(world_data)
View(world_data)
compute_asdr <- function (population_data) {
population_data %>%
mutate(period_time = as.numeric(str_extract(period, "^\\d+"))) %>%
filter(period_time >= 2005) %>%
mutate(asdr=deaths/py)
}
# Compute ASDR for each data set
world_asdr  <- compute_asdr(world_data)
View(world_asdr)
View(world_asdr)
kenya_asdr  <- compute_asdr(kenya_data)
sweden_asdr <- compute_asdr(sweden_data)
View(kenya_asdr)
View(sweden_asdr)
View(world_asdr)
